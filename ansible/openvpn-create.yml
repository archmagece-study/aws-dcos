---
- name: Create OpenVPN EC2 Instance
  hosts: localhost
  connection: local
  gather_facts: no
  vars:
    inifile:    "{{ inventory_dir }}/files/aws.ini"
    access_key: "{{ lookup('ini', 'access_key section=credential file=' + inifile) }}"
    secret_key: "{{ lookup('ini', 'secret_key section=credential file=' + inifile) }}"
    region:     "{{ aws.region }}"
    org:        "{{ aws.organization }}"
    owner:      "{{ aws.owner }}"
    ebs_optimized: "{% if type.startswith('t') %} yes {% else %} no {% endif %}"

  tasks:
  - name: create ec2 instance
    vars:
      name: "ec2-{{ aws.role }}-{{ zone }}-openvpn"
      type: t2.micro
    ec2:
      assign_public_ip: yes
      aws_access_key: "{{ access_key }}"
      aws_secret_key: "{{ secret_key }}"
      ebs_optimized:  "{{ ebs_optimized|bool }}"
      group:          "{{ aws.role }}-openvpn"
      image:          "{{ aws.ami.centos }}"
      instance_tags: 
        Name:         "{{ name }}"
        organization: "{{ org }}"
        owner:        "{{ owner }}"
      instance_type:  "{{ type }}"
      key_name:       develop
      private_ip:     "{{ groups['vpn-' + zone][0] }}"
      region:         "{{ region }}"
      source_dest_check: no
      user_data: |
                 public_hostname=openvpn
                 admin_user=openvpn
                 admin_pw=openvpn         
                 reroute_gw=1
                 reroute_dns=1
      volumes:
      - delete_on_termination: true
        device_name: /dev/sda1
        name: "{{ name }}"
        volume_size: 8
        volume_type: gp2
      vpc_subnet_id: "{{ lookup('ini', 'subnet-network-' + zone + ' section=subnets file=' + inifile) }}"
      wait: yes
    register: ec2

  - name: save openvpn instance ID to aws.ini
    ini_file:
      dest:    "{{ inifile }}"
      section: openvpn
      option:  "ec2_instance_{{ zone }}"
      value:   "{{ ec2.instances[0].id }}"
  - name: save openvpn public_ip to aws.ini
    ini_file:
      dest:    "{{ inifile }}"
      section: openvpn
      option:  "public_ip_{{ zone }}"
      value:   "{{ ec2.instances[0].public_ip }}"

  - name: remove host from ~/.ssh/known_hosts
    known_hosts: name={{ item.private_ip }} state=absent
    with_items: "{{ ec2.instances }}"
  - name: remove host from ~/.ssh/known_hosts
    known_hosts: name={{ item.public_ip }} state=absent
    with_items: "{{ ec2.instances }}"

  - name: wait for instance started.
    wait_for: host={{ item.public_ip }} port=22 delay=60 state=started
    with_items: "{{ ec2.instances }}"
