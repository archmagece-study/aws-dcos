---
- name: Create EC2 Instance for DC/OS Bootstrap Server
  hosts: localhost
  connection: local
  gather_facts: False
  vars:
    ec2_name:  "ec2-{{ aws.role }}-{{ zone }}-dcos-bootstrap"
    instances: "{{ groups['dcos-bootstrap-' + zone] }}"

  tasks:
  - name: launch ec2 instance for DC/OS bootstrap server
    vars:
      subnet_name: "{{ item | subnet_name(aws) }}"
      subnet_id:   "{{ lookup('ini', subnet_name + ' section=subnets file=' + inifiles.aws) }}"
    ec2:
      aws_access_key: "{{ aws.access_key }}"
      aws_secret_key: "{{ aws.secret_key }}"
      ebs_optimized:  yes
      group_id:
      - "{{ lookup('ini', 'sg-' + aws.role + '-private section=security_groups file=' + inifiles.aws) }}"
      image:          "{{ aws.ami.centos }}"
      instance_tags:
        Name:           "{{ ec2_name }}"
        organization:   "{{ aws.organization }}"
        owner:          "{{ aws.owner }}"
      instance_type:  m5.large
      key_name:       platform
      private_ip:     "{{ item }}"
      region:         "{{ aws.region }}"
      volumes:
      - delete_on_termination: yes
        device_name: /dev/sda1
        volume_size: 16
        volume_type: gp2
      vpc_subnet_id: "{{ subnet_id }}"
      wait: yes
    with_items: "{{ instances }}"
    register: ec2

  - include: roles/common/tasks/tagging-volume.yml
    vars:
      target:     "{{ item.instances.0 }}"
      volume:      /dev/sda1
      volume_name: "{{ ec2_name }}"
    with_items: "{{ ec2.results }}"

  - name: remove host from ~/.ssh/known_hosts
    known_hosts: name={{ item }} state=absent
    with_items: "{{ instances }}"


- name: Wait running EC2 instance
  hosts: "dcos-bootstrap-{{ zone }}"
  gather_facts: no
  become: yes

  tasks:
  - pause: seconds=60
  - wait_for_connection:
      dealy: 5
