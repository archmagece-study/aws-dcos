---
- name: Create EC2 Instance for InfluxDB
  hosts: localhost
  connection: local
  gather_facts: False
  vars:
    inifile:    "{{ inventory_dir }}/files/aws.ini"
    access_key: "{{ lookup('ini', 'access_key section=credential file=' + inifile) }}"
    secret_key: "{{ lookup('ini', 'secret_key section=credential file=' + inifile) }}"
    ec2_name:   "ec2-{{ zone }}-dcos-influxdb"
    instances:  "{{ groups['influxdb-' + zone] }}"

  tasks:
  - name: launch ec2 instance for influxdb
    vars:
      subnet_name: "{{ item | subnet_name(aws) }}"
      subnet_id:   "{{ lookup('ini', subnet_name + ' section=subnets file=' + inifile) }}"
    ec2:
      aws_access_key: "{{ access_key }}"
      aws_secret_key: "{{ secret_key }}"
      ebs_optimized:  yes
      group_id:
      - "{{ lookup('ini', 'sg-' + aws.role + '-private section=security_groups file=' + inifile) }}"
      image:          "{{ aws.ami.centos }}"
      instance_tags:
        Name:           "{{ ec2_name }}"
        organization:   "{{ aws.organization }}"
        owner:          "{{ aws.owner }}"
      instance_type:  i3.2xlarge
      key_name:       platform
      private_ip:     "{{ item }}"
      region:         "{{ aws.region }}"
      volumes:
      - delete_on_termination: yes
        device_name: /dev/sda1
        volume_size: 24
        volume_type: gp2
      vpc_subnet_id: "{{ subnet_id }}"
      wait: yes
    with_items: "{{ instances }}"
    register: ec2

  - include: roles/common/tasks/tagging-volume.yml
    vars:
      target:     "{{ item.instances.0 }}"
      volume:      /dev/sda1
      volume_name: "{{ ec2_name }}"
    with_items: "{{ ec2.results }}"

  - name: remove host from ~/.ssh/known_hosts
    known_hosts: name={{ item }} state=absent
    with_items: "{{ groups['influxdb-' + zone] }}"


- name: Wait running EC2 instances
  hosts: "influxdb-{{ zone }}"
  gather_facts: no
  become: yes

  tasks:
  - pause: seconds=60
  - wait_for_connection:
      dealy: 5

  - stat: path=/home/influxdb
    register: influxdb_device
  - name: format file for influxdb block device
    shell: "mkfs.ext4 -F /dev/nvme0n1"
    when: not influxdb_device.stat.exists
  - name: make mount point for influxdb block device
    file: path=/home/influxdb state=directory
    when: not influxdb_device.stat.exists
  - name: mount influxdb block device
    mount:
      src:    /dev/nvme0n1
      name:   /home/influxdb
      fstype: ext4
      opts:   defaults
      dump:   1
      passno: 2
      state:  mounted
    when: not influxdb_device.stat.exists
