---
- name: Remove VPC Network
  hosts: localhost
  connection: local
  gather_facts: no
  vars:
    inifile:       "{{ inventory_dir }}/files/aws.ini"
    access_key:    "{{ lookup('ini', 'access_key section=credential file=' + inifile) }}"
    secret_key:    "{{ lookup('ini', 'secret_key section=credential file=' + inifile) }}"
    region:        "{{ aws.region }}"
    vpc:           "{{ lookup('ini', 'vpc section=network file=' + inifile) }}"

  tasks:
  - name: remove private route table
    vars:
      inioption: "route_table_private_{{ item }}"
    include: roles/vpc/tasks/route_table_remove.yml
    with_items: "{{ aws.network.subnets.network | map(attribute='az') | list }}"
    ignore_errors: yes

  - name: remove public route table
    vars:
      inioption: route_table_public
    include: roles/vpc/tasks/route_table_remove.yml
    ignore_errors: yes

  - name: remove NAT gateways
    vars:
      az:  "{{ item }}"
      nat: "{{ lookup('ini', 'nat_' + az + ' section=network file=' + inifile) }}"
    include: roles/vpc/tasks/nat_remove.yml
    with_items: "{{ aws.network.subnets.network | map(attribute='az') | list }}"
    ignore_errors: yes

  - name: remove internet gateway
    include: roles/vpc/tasks/igw_remove.yml
    ignore_errors: yes

  - name: remove subnets
    vars:
      cidr: "{{ item.cidr }}"
    include: roles/vpc/tasks/subnet_remove.yml
    with_items: "{{ aws.network.subnets.mgmt + aws.network.subnets.network + aws.network.subnets.private + aws.network.subnets.public }}"
    ignore_errors: yes

  - name: remove network subnet IDs from aws.ini file
    ini_file:
      dest:     "{{ inifile }}"
      section:  network
      option:   "subnet_network_{{ item }}"
      state:    absent
    with_items: "{{ aws.network.subnets.network | map(attribute='az') | list }}"

  - name: remove security groups
    include: roles/vpc/tasks/security_group_remove.yml
    with_items:
    - openvpn
    - private
    - public
    ignore_errors: yes

  - name: remove virtual private clouds
    vars:
      cidr_block: "{{ aws.network.vpc.cidr }}"
      name:       "vpc-{{ role }}"
    include: roles/vpc/tasks/vpc_remove.yml
    ignore_errors: yes
