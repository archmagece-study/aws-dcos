---
- name: Create VPC Network
  hosts: localhost
  connection: local
  gather_facts: no
  vars:
    inifile:    "{{ inventory_dir }}/files/aws.ini"
    access_key: "{{ lookup('ini', 'access_key section=credential file=' + inifile) }}"
    secret_key: "{{ lookup('ini', 'secret_key section=credential file=' + inifile) }}"
    region:     "{{ aws.region }}"
    org:        "{{ aws.tags.organization }}"
    owner:      "{{ aws.tags.owner }}"

  tasks:
  - name: create virtual private clouds
    vars:
      cidr_block:     "{{ aws.network.vpc.cidr }}"
      vpc_tags:
        Name:         "vpc-{{ role }}"
        organization: "{{ org }}"
        owner:        "{{ owner }}"
    include: roles/vpc/tasks/vpc_create.yml

  - name: set vpc_id as global variable
    set_fact:
      vpc_id: "{{ lookup('ini', 'vpc section=network file=' + inifile) }}"

  - name: create security groups
    vars:
      desc:           "{{ item.description }}"
      name:           "{{ role }}-{{ item.suffix }}"
      rules:          "{{ item.rules }}"
      sg_tags:
        Name:         "sg-{{ name }}"
        organization: "{{ org }}"
        owner:        "{{ owner }}"
    include: roles/vpc/tasks/security_group_create.yml
    with_items:
    - suffix:      openvpn
      # https://docs.openvpn.net/frequently-asked-questions/
      rules:
      - proto:     tcp
        from_port: 22
        to_port:   22
        cidr_ip:   0.0.0.0/0
      - proto:     tcp
        from_port: 443
        to_port:   443
        cidr_ip:   0.0.0.0/0
      - proto:     tcp
        from_port: 943
        to_port:   943
        cidr_ip:   0.0.0.0/0
      - proto:     udp
        from_port: 1194
        to_port:   1194
        cidr_ip:   0.0.0.0/0
      description: "openvpn SecurityGroup for EC2 instances"
    - suffix:      private
      rules:
      - proto:     all
        from_port: all
        to_port:   all
        cidr_ip:   "{{ aws.network.vpc.cidr }}"
      description: "defualt private SecurityGroup for EC2 instances"
    - suffix:      public
      rules:
      - proto:     all
        from_port: all
        to_port:   all
        cidr_ip:   0.0.0.0/0
      description: "defualt public SecurityGroup for EC2 instances"

  - name: create subnets
    vars:
      az:             "{{ item.az }}"
      cidr:           "{{ item.cidr }}"
      subnet_tags:
        Name:         "subnet-{{ role }}-{{ item.suffix }}"
        organization: "{{ org }}"
        owner:        "{{ owner }}"
    include: roles/vpc/tasks/subnet_create.yml
    with_items: "{{ aws.network.subnets.public + aws.network.subnets.network + aws.network.subnets.private + aws.network.subnets.mgmt }}"

  - name: get network subnet facts
    vars:
      name: "subnet-{{ role }}-network-{{ item  }}"
    ec2_vpc_subnet_facts:
      access_key:   "{{ access_key }}"
      secret_key:   "{{ secret_key }}"
      filters:
        vpc-id:     "{{ vpc_id }}"
        "tag:Name": "{{ name }}"
      region:       "{{ region }}"
    with_items: "{{ aws.network.subnets.network | map(attribute='az') | list }}"
    register: network_subnets

  - name: save network subnet IDs to aws.ini file
    vars:
      cidr:     "{{ item.cidr_block }}"
      id:       "{{ item.id }}"
      subnet:   "{{ aws.network.subnets.network | selectattr('cidr', 'equalto', cidr) | list | first }}"
    ini_file:
      dest:     "{{ inifile }}"
      section:  network
      option:   "subnet_network_{{ subnet.az }}"
      value:    "{{ id }}"
    with_items: "{{ network_subnets.results | map(attribute='subnets.0') | list }}"

  - name: create internet gateway
    vars:
      igw_tags:
        Name:         "igw-{{ role }}"
        organization: "{{ org }}"
        owner:        "{{ owner }}"
    include: roles/vpc/tasks/igw_create.yml

  - name: create NAT gateways
    vars:
      az:        "{{ item }}"
      check:     "{{ lookup('ini', 'nat_' + az + '_interface_id section=network file=' + inifile) }}"
      subnet_id: "{{ lookup('ini', 'subnet_network_' + az + ' section=network file=' + inifile) }}"
    include: roles/vpc/tasks/nat_create.yml
    when:       check|length == 0
    with_items: "{{ aws.network.subnets.network | map(attribute='az') | list }}"

  - name: create public route table
    vars:
      inioption:      route_table_public
      routes:
      - dest:         0.0.0.0/0
        gateway_id:   "{{ lookup('ini', 'igw section=network file=' + inifile) }}"
      route_tags:
        Name:         "route-{{ role }}-public"
        organization: "{{ org }}"
        owner:        "{{ owner }}"
      subnets:        "{{ (aws.network.subnets.network + aws.network.subnets.public) | map(attribute='cidr') | list }}"
    include: roles/vpc/tasks/route_table_create.yml

  - name: create private route tables
    vars:
      inioption:      "route_table_private_{{ item }}"
      routes:
      - dest:         0.0.0.0/0
        interface_id: "{{ lookup('ini', 'nat_' + item  + '_interface_id section=network file=' + inifile) }}"
      route_tags:
        Name:         "route-{{ role }}-private-{{ item }}"
        organization: "{{ org }}"
        owner:        "{{ owner }}"
      subnets:        "{{ (aws.network.subnets.mgmt + aws.network.subnets.private) | selectattr('az', 'equalto', item) | map(attribute='cidr') | list }}"
    include: roles/vpc/tasks/route_table_create.yml
    with_items: "{{ aws.network.subnets.network | map(attribute='az') | list }}"
